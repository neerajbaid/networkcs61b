                                     GRADER

Name of student running submit: Brian Chu
Login of student running submit: cs61b-pq

Second team member's name: Neeraj Baid
Second team member's login: cs61b-pm

Third team member's name (if any): Siddhant Dange
Third team member's login: cs61b-bd

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?
Yes.

Have you tested your program on the 61B lab machines?
Yes.

Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor (or is it a variable-depth search)?
Yes, we successfully implemented game tree search with alpha-beta pruning.
Some limitations include less-than-ideal "resolution" on the evaluation scores because
there was a broad range of possible scores. The default number of search levels is 4.
Variable depth search is used such that if there are step moves, the search depth becomes 2.

Describe your board evaluation function in some detail.
The board evaluation function first checks for win conditions.
If the player has won, Integer.MAX_VALUE is returned.
If the player has lost, Integer.MIN_VALUE is returned.
Otherwise, an intermediate score is returned.
The intermediate score is the sum of the current player's pairs minus
the sum of the opposing player's pairs, scaled by a constant factor.
A pair is two pieces (of the same player)
that form a connection.

Does your MachinePlayer use any special method of choosing the first few moves?
No.

Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.

The program's classes are as follows:
In package "list":
  DList
  DListNode
  InvalidNodeException
  List
  ListIterator
  ListNode
In package "player":
  Board
  Chain
  MachinePlayer
  Move
  Piece
  Player
  ScoredMove

Machine player uses the following modules:

0) Comprehensive linked list data structure.
  Implemented in package "list" (all of the classes there). Implemented by Brian.
  Method prototypes are identical to those found in HW5: http://www.cs.berkeley.edu/~jrs/61b/hw/hw5/.
  
  Except:

  class List implements the Iterable<ListNode> interface.

  DList:
    /**
     *  Removes an Object "item" from the list
     *  Achieved by removing the list node containing that object.
     *  Warning: this runs in linear time.
     */
    public void remove(Object item)

    /**
     *  Returns an iterator object for this list (of type ListIterator<ListNode>).
     *  Used for for-in loops.
     */
    public Iterator<ListNode> iterator()

    /**
     *  Returns true if obj is contained in any of the nodes in this list
     *  Warning: this runs in linear time.
     *  False otherwise.
     */
    public boolean contains(Object obj)

    /**
     *  Returns a shallow copy of this DList.
     *  Only DListNodes are duplicated.
     */
    public DList copy()

    /**
     *  Appends the nodes of "list" to the end of this DList.
     *  Warning: the nodes are not copied or duplicated, so do not modify "list" after extension.
     */
    public void extend(DList list)

  ListIterator implements the standard Java Iterator interface exactly. ListIterator returns ListNodes



1) Determining whether a move is valid
  Implemented in class Board. Implemented by Sidd and Brian

  /**
    * Checks if a move would be a valid ADD move
    * Even if the move is a STEP move, it is treated as an ADD move.
    * int "color" represents the color of the player performing the move.
    * Behavior undefined for a malformed move.
    * Returns a boolean
    */
  protected boolean isValidAddMove(Move move, int color)

  /**
    * Checks if a "move: for the player represented by int "color" is valid
    * Adheres to all of the conditions specified in the project readme.
    * Behavior undefined for a malformed move.
    * Returns boolean
    */
  protected boolean isValidMove(Move move, int color)



2) Generate list of valid moves
  Implemented in class MachinePlayer. Implemented by Sidd and Brian.

  /**
    * Returns a DList of all valid moves that a player can make
    * The player is represented by int "color", which is Board.BLACK or Board.WHITE.
    * Entirely consists of either all add moves or all step moves
    * moves in validMoves conform to the isValidMove method
    */
  public DList validMoves(int color)



3) Finder that finds pieces forming connections with a given piece.
  Implemented in class Board. Implemented by Neeraj.

  /**
    * Starting from "piece", returns the next Piece object of the same color in a specified direction.
    * Returns null if not found.
    * The values for different directions can be found in Board.DIRECTIONS
    */
  private Piece findNextPieceInDirection(Piece piece, int direction) {



4) Finding networks
  Implemented in class Board. Implemented by Neeraj.

  /**
    * Finds all the networks currently on the board for a certain player.
    * The player is represented by int "color", which is Board.BLACK or Board.WHITE.
    * Returns a DList of all the networks for that player.
    */
  protected DList findAllNetworks(int color)



5) Computing an evaluation score for a board
  Implemented in class Board. Implemented by Sidd.

  /**
    * Returns an evaluation score for the current board, for a specified player.
    * The player is represented by int "color", which is Board.BLACK or Board.WHITE.
    * "runIntermediate" determines whether or not the function returns an intermediate score 
    * if no definite wins/losses are found. 
    * If runIntermediate is false, and no wins/losses are found, evaluate returns 0.
    * Evaluate returns an integer ranging from Board.MY_WIN to Board.OPP_WIN,
    * which is Integer.MIN_VALUE to Integer.MAX_VALUE
    */
  protected int evaluate(int player, boolean runIntermediate) {


6) Minimax tree search for finding the best move
  Implemented in class MachinePlayer. Implemented by Brian.

  /**
    * Returns a new intelligent move by "this" player.  Internally records the move (updates
    * the internal game board) as a move by "this" player.
    * The search depth is the search depth set by the constructor (default is a depth of 4)
    * Returns a Move object.
    */
  public Move chooseMove()
